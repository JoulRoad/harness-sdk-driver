akka.http.host-connection-pool.max-connections = 128
akka.http.host-connection-pool.max-open-requests = 8192

# The minimum duration to backoff new connection attempts after the previous connection attempt failed.
#
# The pool uses an exponential randomized backoff scheme. After the first failure, the next attempt will only be
# tried after a random duration between the base connection backoff and twice the base connection backoff. If that
# attempt fails as well, the next attempt will be delayed by twice that amount. The total delay is capped using the
# `max-connection-backoff` setting.
#
# The backoff applies for the complete pool. I.e. after one failed connection attempt, further connection attempts
# to that host will backoff for all connections of the pool. After the service recovered, connections will come out
# of backoff one by one due to the random extra backoff time. This is to avoid overloading just recently recovered
# services with new connections ("thundering herd").
#
# Example: base-connection-backoff = 100ms, max-connection-backoff = 10 seconds
#   - After 1st failure, backoff somewhere between 100ms and 200ms
#   - After 2nd, between  200ms and  400ms
#   - After 3rd, between  200ms and  400ms
#   - After 4th, between  400ms and  800ms
#   - After 5th, between  800ms and 1600ms
#   - After 6th, between 1600ms and 3200ms
#   - After 7th, between 3200ms and 6400ms
#   - After 8th, between 5000ms and 10 seconds (max capped by max-connection-backoff, min by half of that)
#   - After 9th, etc., stays between 5000ms and 10 seconds
#
# This setting only applies to the new pool implementation and is ignored for the legacy one.
base-connection-backoff = 200ms

# Maximum backoff duration between failed connection attempts. For more information see the above comment for the
# `base-connection-backoff` setting.
#
# This setting only applies to the new pool implementation and is ignored for the legacy one.
max-connection-backoff = 5 min